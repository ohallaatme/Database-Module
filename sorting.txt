1.

Q:Write pseudocode for bubble sort:

A: 
procedure bubbleSort(A)
    n = length(A)
    repeat
        swapped = false
        for i = 1 to n-1 inclusive do
            if A[i] > A[i+1] then
                swap (A[i], A[i+1] )
                swapped = true
            end if
        end for
    until not swapped
end procedure


2.

Q:Write pseudocode for quicksort.

A:
function partitionFunc(left, right, pivot)
   leftPointer = left
   rightPointer = right - 1

   while True do
      while A[++leftPointer] < pivot do
         //do-nothing            
      end while
		
      while rightPointer > 0 && A[--rightPointer] > pivot do
         //do-nothing         
      end while
		
      if leftPointer >= rightPointer
         break
      else                
         swap leftPointer,rightPointer
      end if
		
   end while 
	
   swap leftPointer,right
   return leftPointer
	
end function

3.

Q:We talked about time complexity in a previous checkpoint, and how to get an idea of the efficiency of an algorithm. After looking at the pseudocode for the above sorting methods, identify why merge sort and quick sort are much more efficient than the others. Walking through each algorithm with a few sample collections may help.

A: They are more efficient because they use a divide and conquer method vs iterating over every element.


4.

Q:All of the sorts addressed in this checkpoint are known as comparison sorts. Research bucket sort and explain how it works. What is the ideal input for bucket sort?

A: Bucket sort is another divide and conquer that puts data points into "buckets" and sorts them individually using another algorithm. Uniformally distributed elements are ideal for bucket sorts.